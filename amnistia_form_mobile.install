<?php

/**
 * @file
 * Implements installation schema for aministia form mobile.
 */

/**
 * Implements hook_schema().
 */
function amnistia_form_mobile_schema() {
  $schema = array();

  $schema['amnistia_form_mobile'] = array(
    'description' => 'Storage for amnistia form mobile',
    'fields' => array(
      'afme_id' => array(
        'description' => 'Primary key: settings ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'email' => array(
        'description' => 'eMail for lead has filled the form',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'token' => array(
        'description' => 'Token for manage this element',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'form_id' => array(
        'description' => 'Id webform for this element',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data_serialized' => array(
        'description' => 'Form data serialized. Used for refill the form.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'created' => array(
        'description' => 'Creation date for this element (timestamp)',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'Update date for this element (timestamp)',
        'type' => 'int',
      ),
      'status' => array(
        'description' => 'Status for this element. 0: incompleted, 1: incompleted and remembered,2: completed',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      // Consider adding additional fields for time created, time updated.
    ),
    'primary key' => array('afme_id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 *
 * Add a return url field of link type, and 'mobile form' field to the Webform content type
 */
function amnistia_form_mobile_install() {
  $fields = array(
    array(
      'name' => 'field_return_url',
      'type' => 'link_field',
      'label' => 'Return URL',
      'description' => 'URL used to redirect the user once the form is filled',
      'settings' => array(
        'absolute_url' => 1,
        'validate_url' => 1,
        'url' => 0,
        'title' => 'none',
        'enable_tokens' => 0,
        'rel_remove' => 'default',
        'attributes' => array(
          'target' => 'default',
          'configurable_class' => 0,
          'configurable_title' => 0,
        )
      )
    ),
    array(
      'name' => 'field_mobile_form',
      'type' => 'list_boolean',
      'label' => 'Mobile form',
      'description' => 'Check if the form should be displayed with the mobile settings',
      'settings' => array(
        'allowed_values' => array(0, 1),
        'validate_url' => 1,
        'url' => 0,
        'title' => 'none',
        'enable_tokens' => 0,
        'rel_remove' => 'default',
        'attributes' => array(
          'target' => 'default',
          'configurable_class' => 0,
          'configurable_title' => 0,
        )
      )
    )
  );

  // Create all fields on the $fields array
  foreach($fields as $field) {
    if(!field_info_field($field['name'])) {
      // Create field
      field_create_field(array(
        'field_name' => $field['name'],
        'type' => $field['type'],
        'settings' => $field['settings']
      ));

      // Create instance
      field_create_instance(array(
        'field_name' => $field['name'],
        'entity_type' => 'node',
        'bundle' => 'webform',
        'label' => $field['label'],
        'description' => $field['description'],
        'required' => FALSE,
        'settings' => $field['settings']
      ));

      watchdog('amnistia_form_mobile', t('!field_name was added successfully.', array('!field_name' => $field['name'])));
    } else {
      watchdog('amnistia_form_mobile', t('!field_name already exists.', array('!field_name' => $field['name'])));
    }
  }
}


/**
 * Implements hook_uninstall().
 *
 * Remove a return url field of link type, and 'mobile form' field to the Webform content type
 */
function amnistia_form_mobile_uninstall() {
    $field = array(
        'field_name' => 'field_return_url',
        'entity_type' => 'node',
        'bundle' => 'webform',
    );
    if(!field_info_field($field['name'])) {
        field_delete_instance($field);
        field_delete_field($field['field_name']);
        watchdog('amnistia_form_mobile', t('!field_name was removed successfully.', array('!field_name' => $field['field_name'])));
    }

    $field = array(
        'field_name' => 'field_mobile_form',
        'entity_type' => 'node',
        'bundle' => 'webform',
    );
    if(!field_info_field($field['name'])) {
        field_delete_instance($field);
        field_delete_field($field['field_name']);
        watchdog('amnistia_form_mobile', t('!field_name was removed successfully.', array('!field_name' => $field['field_name'])));
    }
}
