<?php

/**
 * @file
 * Implements Amnistia form mobile entity.
 */

/**
 * Implements hook_node_view().
 *
 * Adding CSS & JS for "mobile forms"
 */
function amnistia_form_mobile_node_view($node, $view_mode, $langcode) {

  $node_wrapper = entity_metadata_wrapper('node', $node);

  if(!_is_form_mobile($node_wrapper)){
    return;
  }

  if ($node->type == 'webform' && $view_mode == 'full') {
    $node->content['webform']['#form']['#attributes']['class'][] = 'amnistia_form_mobile';

    $file = drupal_get_path('module', 'amnistia_form_mobile') . '/assets/amnistia_form_mobile.css';
    if (is_file($file)) {
      $node->content['#attached']['css']['amnistia_form_mobile_' . $node->type] = [
        'type' => 'file',
        'group' => CSS_THEME,
        'weight' => 100,
        'data' => $file,
      ];
    }


    $file = drupal_get_path('module', 'amnistia_form_mobile') . '/assets/amnistia_form_mobile.js';
    if (is_file($file)) {
      $node->content['#attached']['js']['amnistia_form_mobile_' . $node->type] = [
        'type' => 'file',
        'group' => JS_THEME,
        'weight' => 100,
        'data' => $file,
      ];
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function amnistia_form_mobile_entity_info() {
  $return = [];

  $return['amnistia_form_mobile_entity'] = [
    // Define basic information.
    'label' => t('Mobile form'),
    'fieldable' => TRUE,

    // Provide information about the database table.
    'base table' => 'amnistia_form_mobile',
    'entity keys' => [
      'id' => 'afme_id',
      'label' => 'email',
    ],
    // Use classes from the Entity API module.
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',

    // Have Entity API set up an administrative UI.
    'admin ui' => [
      'path' => 'admin/amnistia_form_mobile_entity',
      'controller class' => 'EntityContentUIController',
    ],
    'module' => 'amnistia_form_mobile',
    'access callback' => 'amnistia_form_mobile_entity_access',

    // For content-type entities only.
    'uri callback' => 'amnistia_form_mobile_entity_uri',

    // Presentation mode.
    'view modes' => [
      'full' => [
        'label' => t('Full'),
        'custom settings' => FALSE,
      ],
    ],
  ];
  return $return;
}

/**
 * For content-type entities, return the URI for an entity.
 */
function amnistia_form_mobile_entity_uri($entity) {
  return [
    'path' => 'admin/amnistia_form_mobile_entity/' . $entity->afme_id . '/edit',
  ];
}

/**
 * Implements hook_menu().
 */
function amnistia_form_mobile_menu() {
  $items = [];

  // Register for the URL that amnistia_form_mobile_entity_uri() returns.
  // The wildcard %entity_object in the URL is handled by the Entity
  // API function entity_object_load().
  $items['admin/amnistia_form_mobile_entity/%entity_object'] = [
    // entity_object_load() needs to know what the entity type is.
    'load arguments' => ['amnistia_form_mobile_entity'],
    // This callback function, defined below, gives the page title.
    'title callback' => 'amnistia_form_mobile_entity_page_title',
    // Use the Entity API function entity_view() to display the page.
    'page callback' => 'amnistia_form_mobile_admin_page',
    // Pass in the loaded entity object from the URL.
    'page arguments' => [1],
    // This access callback function is defined in Step 5.
    // Its arguments are the operation being attempted and
    // the loaded object.
    'access callback' => 'amnistia_form_mobile_entity_access',
    'access arguments' => ['view', [1]],
    'type' => MENU_CALLBACK,
  ];

  /* $items['admin/structure/entity_amnistia_form_mobile'] = array(
     'title' => 'Administer items',
     'page callback' => 'amnistia_form_mobile_entity_form',
     'access arguments' => array('administer amnistia_form_mobile entities'),
   );*/

  $items['custom/ajaxwork'] = [
    'title' => 'insert AJAX',
    'type' => MENU_CALLBACK,
    'page callback' => 'amnistia_form_entity_callback',
    'access callback' => TRUE,
    //'access arguments' => array('administer amnistia_form_mobile entities'),
  ];

  return $items;
}

/**
 * AJAX callback.
 */
function amnistia_form_entity_callback() {

  $email = _get_email_from_array_recursive($_POST);

  if (empty($email) && !empty($_SESSION['amnistia_form_mobile_email'])) {
    $email = $_SESSION['amnistia_form_mobile_email'];
  }

  $form_id = $_POST['form_id'];

  $getStructureAndRows = _get_structure($email, $form_id);

  $structure = $getStructureAndRows['structure'];
  $num_rows = $getStructureAndRows['num_rows'];

  _save_data($structure, $email, $form_id, $num_rows);

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function amnistia_form_mobile_form_webform_client_form_alter(&$form, &$form_state, $form_id) {

  $node_wrapper = entity_metadata_wrapper('node', $form['#node']);

  if (!_is_form_mobile($node_wrapper)) {
    return;
  }

  if (isset($form_state['input']['submitted'])) {
    $structure = [];
    $allFields = $form_state['webform']['component_tree']['children'];

    foreach ($allFields as &$field) {
      $structure[$field['form_key']] = $field['value'];
    }

    if (isset($form_state['complete form']['submitted']['donativoamount']) && $form_state['complete form']['submitted']['donativoamount']['#value']) {
      $donationAmount = $form_state['complete form']['submitted']['donativoamount']['#value'];
      $_SESSION['amnistia_form_mobile_donationAmount'] = $donationAmount;
    }
    else {
      $donationAmount = $_SESSION['amnistia_form_mobile_donationAmount'];
    }

    foreach ($form['submitted'] as $component) {
      if (preg_match('/copyanimo/', strtolower($component['#webform_component']['form_key'])) == TRUE) {
        _change_copyanimo($form, $donationAmount, $component['#webform_component']['form_key']);

      }
    }

    $email = _get_email_from_array_recursive($form_state);
    $getStructureAndRows = _get_structure($email, $form_id);
    $structure = $getStructureAndRows['structure'];
    $num_rows = $getStructureAndRows['num_rows'];

    _save_data($structure, $email, $form_id, $num_rows);
  }

  array_unshift($form['#submit'], '_submit_form_mobile');
}

/**
 * @param $form
 * @param $donationAmount
 *
 * @return array
 */
function _change_copyanimo(&$form, $donationAmount, $form_key) {

  $message = $form['submitted'][$form_key]['#webform_component']['value'];
  $newCopy = str_replace('%donativo', $donationAmount, $message);
  $form['submitted'][$form_key]['#default_value'] = $newCopy;

}


/**
 * Implements hook_webform_component_render_alter().
 */

function _is_form_mobile($node_wrapper) {
  //$node_wrapper = entity_metadata_wrapper('node', $form['#node']);

  if ($node_wrapper->field_mobile_form) {
    return $node_wrapper->field_mobile_form->value();
  }

  return false;
}

/**
 * Return email from recursive array.
 */
function _get_email_from_array_recursive($array) {

  if (!empty($array)) {
    array_walk_recursive($array, function ($value, $key) {
      if (preg_match('/email/', strtolower($key)) == TRUE) {
        $_SESSION['amnistia_form_mobile_email'] = $value;
      }
    });

    //$email = variable_get('email');
    $email = $_SESSION['amnistia_form_mobile_email'];
  }
  return $email;
}

/**
 * Change status to completed when the last step of form is submitted.
 */
function _submit_form_mobile($form, &$form_state) {
  $node_wrapper = entity_metadata_wrapper('node', $form['#node']);

  if (!_is_form_mobile($node_wrapper)){
    return;
  }

  $email = _get_email_from_array_recursive($form);
  $form_id = $form_state['input']['form_id'];
  if ($form_state['input']['details']['page_num'] == $form_state['input']['details']['page_count']) {
    $record = db_update('amnistia_form_mobile')
      ->fields([
        'status' => 2,
        'updated' => REQUEST_TIME,
      ])
      ->condition('email', $email)
      ->condition('form_id', $form_id)
      ->execute();
  }

}

/**
 * Return the structure from database for form data.
 */
function _get_structure($email, $form_id) {

  $result = db_query("SELECT afme_id, email, token, form_id, data_serialized, status FROM {amnistia_form_mobile} WHERE email = :email AND form_id = :form_id",
    [':email' => $email, ':form_id' => $form_id]);
  $num_rows = $result->rowCount();

  if ($num_rows !== 0) {
    $record = $result->fetchAll();
    foreach ($record as $key => $value) {
      $data_serialized = $value->data_serialized;
      $structure = unserialize($data_serialized);
    }
  }

  foreach ($_POST['submitted'] as $key => $value) {
    $structure[$key] = $value;
  }
  if (isset($structure)) {
    foreach ($structure as $key => $value) {
      if (isset($form_state['input']['submitted'][$key])) {
        $structure[$key] = $form_state['input']['submitted'][$key];
      }
      elseif (isset($_POST['submitted'][$key])) {
        $structure[$key] = $_POST['submitted'][$key];
      }
    }
  }

  return [
    'structure' => $structure,
    'num_rows' => $num_rows,
  ];
}

/**
 * Insert or update values from form_mobile.
 */
function _save_data($structure, $email, $form_id, $num_rows) {
  $serialized = serialize($structure);


  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return;
  }


  if (($num_rows === 0) && !empty($email)) {
    $record = db_insert('amnistia_form_mobile')
      ->fields([
        'email',
        'token',
        'form_id',
        'data_serialized',
        'created',
        'updated',
      ])
      ->values([
          'email' => $email,
          'token' => drupal_hash_base64($email),
          'form_id' => $form_id,
          'data_serialized' => $serialized,
          'created' => REQUEST_TIME,
        ]
      )->execute();

  }
  else {
    $record = db_update('amnistia_form_mobile')
      ->fields([
        'data_serialized' => $serialized,
        'updated' => REQUEST_TIME,
      ])
      ->condition('email', $email)
      ->condition('form_id', $form_id)
      ->execute();

  }
}

function _email_malformed($email) {
  return (bool) !preg_match("/[a-zA-Z0-9_-.+]+@[a-zA-Z0-9-]+.[a-zA-Z]+/", $email);
}

/**
 * Title callback function registered above.
 */
function amnistia_form_mobile_entity_page_title($entity) {
  return $entity->email;
}

/**
 * Define the permisions.
 */
function amnistia_form_mobile_permission() {
  return [
    'view amnistia_form_mobile_entity' => [
      'title' => t('View my entity content'),
    ],
    'administer amnistia_form_mobile_entity' => [
      'title' => t('Administer my entities'),
    ],
  ];
}

/**
 * Access callback for Entity API.
 */
function amnistia_form_mobile_entity_access($op, $entity, $account = NULL) {
  // $op is 'view', 'update', 'create', etc.
  // $entity could be NULL (to check access for all entity items)
  // or it could be a single entity item object.
  // $account is either NULL or a user object.
  //
  // In this simple example, just check permissions for
  // viewing or administering the entity type generically.
  if ($op == 'view') {
    return user_access('view amnistia_form_mobile_entity', $account);
  }
  return user_access('administer amnistia_form_mobile_entity', $account);
}

/**
 * Form-generating function for the editing form.
 */
function amnistia_form_mobile_entity_form($form, $form_state, $entity) {
  $form['email'] = [
    '#title' => t('eMail'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->email) ? $entity->email : '',
  ];

  $form['token'] = [
    '#title' => t('Token'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->token) ? $entity->token : drupal_hash_base64(isset($entity->email) ? $entity->email : ''),
  ];

  // Named 'amnistia_form_id' because form_id has a conflict.
  $form['amnistia_form_id'] = [
    '#title' => t('Id. for related webform'),
    '#type' => 'hidden',
    '#default_value' => isset($entity->form_id) ? $entity->form_id : '',
  ];


  $form['status'] = [
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => [
      0 => t('Incomplete'),
      1 => t('Remember'),
      2 => t('Complete'),
    ],
    '#default_value' => isset($entity->status) ? $entity->status : 0,
  ];

  $form['actions'] = ['#type' => 'actions'];
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
  ];

  $form['actions']['delete'] = [
    '#type' => 'submit',
    '#attributes' => ['onclick' => 'if(!confirm("¿Realmente desea eliminar esta entrada?")){return false;}'],
    '#submit' => ['amnistia_form_mobile_entity_form_delete'],
    '#value' => t('Delete'),
    '#weight' => 10,
  ];


  field_attach_form('amnistia_form_mobile_entity', $entity, $form, $form_state);

  return $form;
}

/**
 * Form submission handler for deleting edit form.
 */
function amnistia_form_mobile_entity_form_delete($form, &$form_state) {
  // Make use of Entity API class.
  $entity = entity_ui_form_submit_build_entity($form, $form_state);

  $entity->delete();

  // Redirect to the management page.
  $form_state['redirect'] = 'admin/amnistia-form-mobile-view';
}

/**
 * Form submission handler for editing form.
 */
function amnistia_form_mobile_entity_form_submit($form, &$form_state) {
  // Make use of Entity API class.
  $entity = entity_ui_form_submit_build_entity($form, $form_state);

  $entity->form_id = $form_state['input']['amnistia_form_id'];

  if (isset($entity->created)) {
    $entity->update = strtotime('now');
  }
  else {
    $entity->created = strtotime('now');
  }

  $entity->save();

  // Redirect to the management page.
  $form_state['redirect'] = 'admin/amnistia-form-mobile-view';
}

/**
 * Implements hook_entity_update().
 */
function amnistia_form_mobile_entity_update($entity, $type) {
  // Update the entity's entry in a fictional table of all entities.
  $info = entity_get_info($type);
  list($id) = entity_extract_ids($type, $entity);
  db_update('amnistia_form_mobile')
    ->fields([
      'updated' => REQUEST_TIME,
    ])
    ->condition('form_id', $entity->form_id)
    ->condition('afme_id', $id)
    ->execute();

  if ($entity->status == "1" && $entity->original->status == "0") {
    // We retrieve the nid of the webform related.
    $webform_id = str_replace('webform_client_form_', '', $entity->form_id);
    $webform = node_load($webform_id);

    $link_text = '';
    preg_match('/\[FORM_LINK(.+?)?\](?:(.+?)?\[\/FORM_LINK\])?/', $webform->field_email_reminder_content['und'][0]['value'], $matches);
    if (isset($matches[1])) {
      preg_match('/"(.*?)"/', $matches[1], $matches2);
    }
    if (isset($matches2[1])) {
      $link_text = $matches2[1];
    }
    if (!empty($link_text)) {
      $options = ['absolute' => TRUE];
      $url = url('node/' . $webform->nid, $options) . '?token=' . $entity->token;
      $link = l($link_text, $url);
      $webform->field_email_reminder_content['und'][0]['value'] = str_replace($matches[0], $link, $webform->field_email_reminder_content['und'][0]['value']);
    }
    _change_tokens($webform, $entity);
    $params = [
      'module' => 'amnistia_form_mobile',
      'key' => 'amnistia_form_mobile',
      'from' => $webform->field_email_reminder_from['und'][0]['value'],
      'to' => $entity->email,
      'subject' => $webform->field_email_reminder_subject['und'][0]['value'],
      'body' => $webform->field_email_reminder_content['und'][0]['value'],
    ];
    amnistia_form_mobile_send($params);
  }
}

/**
 * Implements hook_views_api().
 */
function amnistia_form_mobile_views_api() {
  return [
    'api' => 3,
    'path' => drupal_get_path('module', 'amnistia_form_mobile'),
    'template path' => drupal_get_path('module', 'amnistia_form_mobile'),
  ];
}

/**
 * Implements hook_views_default_views().
 */
function amnistia_form_mobile_views_default_views() {

  $export = [];

  $view = new view();
  $view->name = 'amnistia_form_mobile_view';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'amnistia_form_mobile';
  $view->human_name = 'Amnistia Form Mobile View';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Amnistia Form Mobile View';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['use_more_text'] = 'más';
  $handler->display->display_options['access']['type'] = 'none';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['exposed_form']['options']['submit_button'] = 'Aplicar';
  $handler->display->display_options['exposed_form']['options']['reset_button_label'] = 'Reiniciar';
  $handler->display->display_options['exposed_form']['options']['exposed_sorts_label'] = 'Ordenar por';
  $handler->display->display_options['exposed_form']['options']['sort_asc_label'] = 'Ascendente';
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['pager']['options']['items_per_page'] = '25';
  $handler->display->display_options['pager']['options']['expose']['items_per_page_label'] = 'Elementos por página';
  $handler->display->display_options['pager']['options']['expose']['items_per_page_options_all_label'] = '- Todos -';
  $handler->display->display_options['pager']['options']['expose']['offset_label'] = 'Desplazamiento';
  $handler->display->display_options['pager']['options']['tags']['first'] = '« primera';
  $handler->display->display_options['pager']['options']['tags']['previous'] = '‹ anterior';
  $handler->display->display_options['pager']['options']['tags']['next'] = 'siguiente ›';
  $handler->display->display_options['pager']['options']['tags']['last'] = 'última »';
  $handler->display->display_options['style_plugin'] = 'table';
  $handler->display->display_options['style_options']['columns'] = [
    'afme_id' => 'afme_id',
  ];
  $handler->display->display_options['style_options']['default'] = '-1';
  $handler->display->display_options['style_options']['info'] = [
    'afme_id' => [
      'sortable' => 0,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    ],
  ];
  /* Campo: Mobile form: Created */
  $handler->display->display_options['fields']['created']['id'] = 'created';
  $handler->display->display_options['fields']['created']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['fields']['created']['field'] = 'created';
  $handler->display->display_options['fields']['created']['label'] = '';
  $handler->display->display_options['fields']['created']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['created']['separator'] = '';
  /* Campo: Mobile form: Etiqueta */
  $handler->display->display_options['fields']['email']['id'] = 'email';
  $handler->display->display_options['fields']['email']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['fields']['email']['field'] = 'email';
  $handler->display->display_options['fields']['email']['alter']['path'] = 'entity_amnistia_form_mobile/';
  $handler->display->display_options['fields']['email']['element_label_colon'] = FALSE;
  /* Campo: Mobile form: Status */
  $handler->display->display_options['fields']['status']['id'] = 'status';
  $handler->display->display_options['fields']['status']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['fields']['status']['field'] = 'status';
  $handler->display->display_options['fields']['status']['label'] = 'Estado';
  $handler->display->display_options['fields']['status']['alter']['alter_text'] = TRUE;
  $handler->display->display_options['fields']['status']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['status']['separator'] = '';
  /* Campo: Mobile form: Form_id */
  $handler->display->display_options['fields']['form_id']['id'] = 'form_id';
  $handler->display->display_options['fields']['form_id']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['fields']['form_id']['field'] = 'form_id';
  $handler->display->display_options['fields']['form_id']['element_label_colon'] = FALSE;
  /* Campo: Mobile form: URL */
  $handler->display->display_options['fields']['url']['id'] = 'url';
  $handler->display->display_options['fields']['url']['table'] = 'views_entity_amnistia_form_mobile_entity';
  $handler->display->display_options['fields']['url']['field'] = 'url';
  $handler->display->display_options['fields']['url']['label'] = '';
  $handler->display->display_options['fields']['url']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['url']['link_to_entity'] = 1;
  /* Criterio de ordenación: Mobile form: Created */
  $handler->display->display_options['sorts']['created']['id'] = 'created';
  $handler->display->display_options['sorts']['created']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['sorts']['created']['field'] = 'created';
  $handler->display->display_options['sorts']['created']['order'] = 'DESC';
  $handler->display->display_options['sorts']['created']['exposed'] = TRUE;
  $handler->display->display_options['sorts']['created']['expose']['label'] = 'Created';
  /* Criterio de ordenación: Mobile form: Status */
  $handler->display->display_options['sorts']['status']['id'] = 'status';
  $handler->display->display_options['sorts']['status']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['sorts']['status']['field'] = 'status';
  $handler->display->display_options['sorts']['status']['exposed'] = TRUE;
  $handler->display->display_options['sorts']['status']['expose']['label'] = 'Status';
  /* Criterio de ordenación: Mobile form: Updated */
  $handler->display->display_options['sorts']['updated']['id'] = 'updated';
  $handler->display->display_options['sorts']['updated']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['sorts']['updated']['field'] = 'updated';
  $handler->display->display_options['sorts']['updated']['order'] = 'DESC';
  $handler->display->display_options['sorts']['updated']['exposed'] = TRUE;
  $handler->display->display_options['sorts']['updated']['expose']['label'] = 'Updated';
  /* Criterios de filtrado: Mobile form: Status */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'amnistia_form_mobile';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['exposed'] = TRUE;
  $handler->display->display_options['filters']['status']['expose']['operator_id'] = 'status_op';
  $handler->display->display_options['filters']['status']['expose']['label'] = 'Status';
  $handler->display->display_options['filters']['status']['expose']['operator'] = 'status_op';
  $handler->display->display_options['filters']['status']['expose']['identifier'] = 'status';
  $handler->display->display_options['filters']['status']['is_grouped'] = TRUE;
  $handler->display->display_options['filters']['status']['group_info']['label'] = 'Status';
  $handler->display->display_options['filters']['status']['group_info']['identifier'] = 'status';
  $handler->display->display_options['filters']['status']['group_info']['widget'] = 'radios';
  $handler->display->display_options['filters']['status']['group_info']['remember'] = 1;
  $handler->display->display_options['filters']['status']['group_info']['default_group'] = '1';
  $handler->display->display_options['filters']['status']['group_info']['group_items'] = [
    1 => [
      'title' => 'Incomplete',
      'operator' => '=',
      'value' => [
        'value' => '0',
        'min' => '',
        'max' => '',
      ],
    ],
    2 => [
      'title' => 'Notified',
      'operator' => '=',
      'value' => [
        'value' => '1',
        'min' => '',
        'max' => '',
      ],
    ],
    3 => [
      'title' => 'Completed',
      'operator' => '=',
      'value' => [
        'value' => '2',
        'min' => '',
        'max' => '',
      ],
    ],
  ];

  /* Display: Page */
  $handler = $view->new_display('page', 'Page', 'page');
  $handler->display->display_options['path'] = 'admin/amnistia-form-mobile-view';
  $handler->display->display_options['menu']['type'] = 'normal';
  $handler->display->display_options['menu']['title'] = 'Amnistia Form Mobile View';
  $handler->display->display_options['menu']['name'] = 'devel';
  $translatables['amnistia_form_mobile_view'] = [
    t('Master'),
    t('Amnistia Form Mobile View'),
    t('más'),
    t('Aplicar'),
    t('Reiniciar'),
    t('Ordenar por'),
    t('Ascendente'),
    t('Desc'),
    t('Elementos por página'),
    t('- Todos -'),
    t('Desplazamiento'),
    t('« primera'),
    t('‹ anterior'),
    t('siguiente ›'),
    t('última »'),
    t('.'),
    t('Etiqueta'),
    t('Estado'),
    t('Form_id'),
    t('Created'),
    t('Status'),
    t('Updated'),
    t('Page'),
  ];

  $export['test'] = $view;
  return $export;

}

/**
 * Implements hook_form_alter().
 */
function amnistia_form_mobile_form_alter(&$form, &$form_state, $form_id) {
  if (isset($_GET['token'])) {
    $token = $_GET['token'];

    $result = db_query("SELECT afme_id, email, token, form_id, data_serialized, status FROM {amnistia_form_mobile} WHERE token = :token",
      [':token' => $token]);
    $record = $result->fetchAll();

    $dataSerialized = NULL;
    $email = NULL;

    foreach ($record as $key => $value) {
      if ($value->form_id == $form_id) {
        $dataSerialized = $value->data_serialized;
      }
    }

    if (!empty($dataSerialized)) {
      $dataUnserialized = unserialize($dataSerialized);

      array_walk_recursive($dataUnserialized, function (&$value, $key) {
        if (is_string($value) && !empty($value)) {
          $value = ['#default_value' => $value];
        }
      });

      $new_arra = array_replace_recursive($form['submitted'], $dataUnserialized);

      $form['submitted'] = $new_arra;
    }
  }
}

/**
 * Implements hook_mail().
 */
function amnistia_form_mobile_mail($key, &$message, $params) {

  // Language selection.
  $options = [
    'langcode' => $message['language']->language,
  ];
  switch ($key) {
    case "amnistia_form_mobile":
      $message['subject'] = isset($params['subject']) ? $params['subject'] : '[Amnistia] Remember fill the form';
      $message['body'] = isset($params['body']) ? $params['body'] : NULL;
      if (isset($params['headers']) && is_array($params['headers'])) {
        $message['headers'] += $params['headers'];
      }
      break;
  }
}

/**
 * Implements hook_mail_alter().
 */
function amnistia_form_mobile_mail_alter(&$message) {
  $headers = [
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset = iso-8859-1; format = flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal',
  ];
  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
}


/**
 * Wrapper function to invoke mail.
 */
function amnistia_form_mobile_send(array $values = []) {
  $module = $values['module'];
  $key = $values['key'];
  $to = $values['to'];
  $from = $values['from'];
  $language = isset($values['lang']) ? $values['lang'] : language_default();

  $params = [
    'subject' => $values['subject'],
    'body' => [$values['body']],
  ];
  if (array_key_exists('headers', $values)) {
    // Assumed as an array.
    $params['headers'] = $values['headers'];
  }

  $send = TRUE;
  $mail = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($mail['result']) {
    $msg = 'An email reminder was sent to: ' . $to;
    watchdog('amnistia_form_mobile', $msg, [], WATCHDOG_NOTICE);
    return TRUE;
  }
  else {
    $error_msg = 'Failed to send the email in amnistia_form_mobile Module';
    watchdog('amnistia_form_mobile', $error_msg, [], WATCHDOG_ALERT);
    return FALSE;
  }
}

/**
 * Administration page.
 */
function amnistia_form_mobile_admin_page() {
  $content = [];

  // Link for add new item.
  $content[] = [
    '#type' => 'amnistia_form_mobile',
    '#markup' => l(t('Add a new Item'), 'item/add'),
  ];

  // Table with all Items.
  $content['table'] = amnistia_form_mobile_list_entities();

  return $content;
}

/**
 * Array table style with the created entities.
 */
function amnistia_form_mobile_list_entities() {
  $content = [];

  $entities = amnistia_form_mobile_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $rows[] = [
        'data' => [
          'id' => $entity->afme_id,
          'email' => $entity->email,
          'form_id' => $entity->form_id,
          'status' => $entity->status,
        ],
      ];
    }
    $content['table'] = [
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => [t('ID'), t('Sender'), t('Form Id'), t('Status')],
    ];
  }
  else {
    $content[] = [
      '#type' => 'item',
      '#markup' => t("There aren't any Items."),
    ];
  }

  return $content;
}

/**
 * Implements hook_load().
 */
function amnistia_form_mobile_load($item_id = NULL, $reset = FALSE) {
  $item_id = (isset($item_id) ? [$item_id] : []);
  $item = amnistia_form_mobile_load_multiple($item_id, $reset);
  return $item ? reset($item) : FALSE;
}

/**
 * Implements hook_load_multiple().
 */
function amnistia_form_mobile_load_multiple($items_id = FALSE, $conditions = [], $reset = FALSE) {
  return entity_load('amnistia_form_mobile', $items_id, $conditions, $reset);
}

/**
 * Implements hook_cron().
 */
function amnistia_form_mobile_cron() {

  // We retrieve all 'amnistia_form_mobile_entity' entitites with status 0.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'amnistia_form_mobile_entity')
    ->propertyCondition('status', 0);
  $results = $query->execute();

  if (isset($results['amnistia_form_mobile_entity'])) {

    foreach ($results['amnistia_form_mobile_entity'] as $key => $value) {
      // We retrieve the nid of the webform related with this submission.
      $entity_submission = entity_load_single('amnistia_form_mobile_entity', [$value->afme_id]);

      $webform_id = str_replace('webform_client_form_', '', $entity_submission->form_id);
      $webform = node_load($webform_id);

      $current = time();

      if ($webform && $webform->field_time_remember['und'][0]['value'] != 0 && ($current > ($entity_submission->created + $webform->field_time_remember['und'][0]['value']))) {
        // We replace the shortcode ([FORM_LINK text="here"]) by a link, if the shortcode exists.
        $link_text = '';
        preg_match('/\[FORM_LINK(.+?)?\](?:(.+?)?\[\/FORM_LINK\])?/', $webform->field_email_reminder_content['und'][0]['value'], $matches);
        if (isset($matches[1])) {
          preg_match('/"(.*?)"/', $matches[1], $matches2);
        }
        if (isset($matches2[1])) {
          $link_text = $matches2[1];
        }
        if (!empty($link_text)) {
          $options = ['absolute' => TRUE];
          $url = url('node/' . $webform->nid, $options) . '?token=' . $entity_submission->token;
          $link = l($link_text, $url);
          $webform->field_email_reminder_content['und'][0]['value'] = str_replace($matches[0], $link, $webform->field_email_reminder_content['und'][0]['value']);
        }
        _change_tokens($webform, $entity_submission);

        // Change submission status: 0 (incomplete) -> 1 (remembered) (Automatically it sends email reminder).
        $entity_submission->status = 1;
        $entity_submission->save();
      }
    }
  }
}

function _change_tokens(&$webform, $entity) {
  preg_match_all('/\[FIELD:(.+?)\]/', $webform->field_email_reminder_content['und'][0]['value'], $matches, PREG_PATTERN_ORDER);

  $replaceText = [];
  $data = $entity->data_serialized;

  foreach ($matches[1] as $key => $field) {
    $replaceText[$key] = _findKey($data, $field);
  }
  foreach ($matches[0] as $key => $changeText) {
    $webform->field_email_reminder_content['und'][0]['value'] = str_replace($matches[0][$key], $replaceText[$key], $webform->field_email_reminder_content['und'][0]['value']);
  }

}

function _findKey($array, $keySearch) {
  foreach ($array as $key => $item) {
    if ($key === $keySearch) {
      return $item;
    }
    if (is_array($item)) {
      return _findKey($item, $keySearch);
    }
  }
  return FALSE;
}